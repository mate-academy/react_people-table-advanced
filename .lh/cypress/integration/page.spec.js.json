{
    "sourceFile": "cypress/integration/page.spec.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1715857970491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715858214210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,26 +6,29 @@\n const page = {\n   spyOnPeopleRequest: () => {\n     const spy = cy.spy().as('peopleRequest');\n \n-    cy.intercept('**/people.json', (req) => {\n+    cy.intercept('**/people.json', req => {\n       spy();\n       req.reply({ body: [] });\n-    })\n+    });\n   },\n-  mockPeople: () => cy.intercept('**/people.json', { fixture: 'people' }).as('peopleData'),\n-  mockLessPeople: () => cy.intercept('**/people.json', { fixture: 'lessPeople' }).as('peopleData'),\n-  mockNoPeople: () => cy.intercept('**/people.json', { body: [] }).as('peopleData'),\n+  mockPeople: () =>\n+    cy.intercept('**/people.json', { fixture: 'people' }).as('peopleData'),\n+  mockLessPeople: () =>\n+    cy.intercept('**/people.json', { fixture: 'lessPeople' }).as('peopleData'),\n+  mockNoPeople: () =>\n+    cy.intercept('**/people.json', { body: [] }).as('peopleData'),\n   mockPeopleError: () => {\n     const errorResponse = {\n       statusCode: 404,\n       body: '404 Not Found!',\n     };\n \n-    return cy.intercept('**/people.json', errorResponse).as('peopleData')\n+    return cy.intercept('**/people.json', errorResponse).as('peopleData');\n   },\n \n-  visit: (url) => {\n+  visit: url => {\n     cy.visit(url);\n     page.getByDataCy('app').should('exist');\n   },\n   getByDataCy: name => cy.get(`[data-cy=\"${name}\"]`),\n@@ -39,16 +42,15 @@\n   heading: () => page.peopleTable().find('th'),\n \n   assertHash: hash => cy.location('hash').should('eq', hash),\n   assertSearch: search => cy.location('search').should('eq', search),\n-  assetTitle: text => page.title()\n-    .should('have.length', 1)\n-    .and('have.text', text),\n-}\n+  assetTitle: text =>\n+    page.title().should('have.length', 1).and('have.text', text),\n+};\n \n let failed = false;\n \n-Cypress.on('fail', (e) => {\n+Cypress.on('fail', e => {\n   failed = true;\n   throw e;\n });\n \n@@ -72,18 +74,20 @@\n \n     it('should mark Home nav link as active', () => {\n       page.mockPeople();\n       page.visit('/');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'Home')\n         .should('have.attr', 'href', '#/')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should not mark People nav link as active', () => {\n       page.mockPeople();\n       page.visit('/');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .should('have.attr', 'href', '#/people')\n         .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n@@ -93,9 +97,8 @@\n       page.visit('/');\n       page.assetTitle('Home Page');\n     });\n \n-\n     it('should not send API request', () => {\n       page.spyOnPeopleRequest();\n       page.visit('/');\n       cy.get('@peopleRequest').should('not.be.called');\n@@ -151,10 +154,16 @@\n     it('should not have active nav links', () => {\n       page.mockPeople();\n       page.visit('/#/some/not/existing/page');\n \n-      page.nav().contains('a', 'Home').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n-      page.nav().contains('a', 'People').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n+      page\n+        .nav()\n+        .contains('a', 'Home')\n+        .should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n+      page\n+        .nav()\n+        .contains('a', 'People')\n+        .should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should have only correct title', () => {\n       page.mockPeople();\n@@ -209,17 +218,19 @@\n \n     it('should have People nav link active', () => {\n       page.mockPeople();\n       page.visit('/#/people');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should have Home nav link not active', () => {\n       page.mockPeople();\n       page.visit('/#/people');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'Home')\n         .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -343,10 +354,9 @@\n \n     it('should show the people loaded from API', () => {\n       page.mockLessPeople();\n       page.visit('/#/people');\n-      page.people()\n-        .should('have.length', 6);\n+      page.people().should('have.length', 6);\n     });\n \n     describe('People table', () => {\n       beforeEach(() => {\n@@ -365,44 +375,70 @@\n         page.heading().eq(5).should('have.text', 'Father');\n       });\n \n       it('should show all the people', () => {\n-        page.people()\n-          .should('have.length', 39);\n+        page.people().should('have.length', 39);\n       });\n \n       it('should render all required person data', () => {\n-        page.people().eq(1).find('td').eq(0).should('have.text', 'Emma de Milliano');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n+          .should('have.text', 'Emma de Milliano');\n         page.people().eq(1).find('td').eq(1).should('have.text', 'f');\n         page.people().eq(1).find('td').eq(2).should('have.text', '1876');\n         page.people().eq(1).find('td').eq(3).should('have.text', '1956');\n-        page.people().eq(1).find('td').eq(4).should('have.text', 'Sophia van Damme');\n-        page.people().eq(1).find('td').eq(5).should('have.text', 'Petrus de Milliano');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(4)\n+          .should('have.text', 'Sophia van Damme');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(5)\n+          .should('have.text', 'Petrus de Milliano');\n       });\n \n       it('should have red names for women', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.class', 'has-text-danger');\n       });\n \n       it('should have blue names for men', () => {\n-        page.people().eq(3)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(3)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('not.have.class', 'has-text-danger');\n       });\n \n       it('should have correct links as person names', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.attr', 'href', '#/people/emma-de-milliano-1876')\n           .and('have.text', 'Emma de Milliano');\n \n-        page.people().eq(3)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(3)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.attr', 'href', '#/people/jan-van-brussel-1714')\n           .and('have.text', 'Jan van Brussel');\n       });\n@@ -410,64 +446,57 @@\n       it('should not have a selected person', () => {\n         page.mockPeople();\n         page.visit('/#/people');\n \n-        cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-          .should('not.exist');\n+        cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should(\n+          'not.exist',\n+        );\n       });\n \n       it('should allow to select a person', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n-          .find('a')\n-          .click();\n+        page.people().eq(1).find('td').eq(0).find('a').click();\n \n-        page.assertHash('#/people/emma-de-milliano-1876')\n+        page.assertHash('#/people/emma-de-milliano-1876');\n \n-        page.people().eq(1)\n-          .should('have.class', SELECTED_PERSON_CLASS);\n+        page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n       });\n \n       it('should have a red link to a mother', () => {\n-        page.people().eq(0)\n-          .find('td').eq(4)\n+        page\n+          .people()\n+          .eq(0)\n+          .find('td')\n+          .eq(4)\n           .contains('a', 'Maria van Brussel')\n           .should('have.attr', 'href', '#/people/maria-van-brussel-1801')\n-          .and('have.class', 'has-text-danger')\n+          .and('have.class', 'has-text-danger');\n       });\n \n       it('should have a link to a father', () => {\n-        page.people().eq(4)\n-          .find('td').eq(5)\n+        page\n+          .people()\n+          .eq(4)\n+          .find('td')\n+          .eq(5)\n           .contains('a', 'Emile Haverbeke')\n           .should('have.attr', 'href', '#/people/emile-haverbeke-1877')\n-          .and('not.have.class', 'has-text-danger')\n+          .and('not.have.class', 'has-text-danger');\n       });\n \n       it('should have a text name if the mother is not in the table', () => {\n-        page.people().eq(1)\n-          .find('td').eq(4)\n-          .find('a')\n-          .should('not.exist')\n+        page.people().eq(1).find('td').eq(4).find('a').should('not.exist');\n       });\n \n       it('should have a text name if the father is not in the table', () => {\n-        page.people().eq(1)\n-          .find('td').eq(5)\n-          .find('a')\n-          .should('not.exist')\n+        page.people().eq(1).find('td').eq(5).find('a').should('not.exist');\n       });\n \n       it('should have an empty cell if the motherName is not given', () => {\n-        page.people().eq(20)\n-          .find('td').eq(4)\n-          .should('have.text', '-')\n+        page.people().eq(20).find('td').eq(4).should('have.text', '-');\n       });\n \n       it('should have an empty cell if the fatherName is not given', () => {\n-        page.people().eq(20)\n-          .find('td').eq(5)\n-          .should('have.text', '-')\n+        page.people().eq(20).find('td').eq(5).should('have.text', '-');\n       });\n     });\n   });\n \n@@ -481,9 +510,10 @@\n       page.assertHash('#/people/emma-de-milliano-1876');\n     });\n \n     it('should have People nav link active', () => {\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -495,37 +525,32 @@\n       page.peopleTable().should('exist');\n     });\n \n     it('should have one selected person', () => {\n-      page.people().eq(1)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n \n-      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-        .should('have.length', 1);\n+      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should(\n+        'have.length',\n+        1,\n+      );\n     });\n \n     it('should highlight person with given slug', () => {\n       page.visit('/#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .should('have.class', SELECTED_PERSON_CLASS)\n+      page.people().eq(3).should('have.class', SELECTED_PERSON_CLASS);\n     });\n \n     it('should allow to select another person', () => {\n       page.visit('/#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .find('td').eq(0)\n-        .find('a')\n-        .click();\n+      page.people().eq(3).find('td').eq(0).find('a').click();\n \n-      page.assertHash('#/people/jan-van-brussel-1714')\n+      page.assertHash('#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(3).should('have.class', SELECTED_PERSON_CLASS);\n \n-      page.people().eq(1)\n-        .should('not.have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('not.have.class', SELECTED_PERSON_CLASS);\n     });\n   });\n \n   describe('#/people/:wrong-slug page', () => {\n@@ -538,9 +563,10 @@\n       page.assertHash('#/people/non-existing-slug');\n     });\n \n     it('should have People nav link active', () => {\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -552,21 +578,16 @@\n       page.peopleTable().should('exist');\n     });\n \n     it('should not have a selected person', () => {\n-      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-        .should('not.exist');\n+      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should('not.exist');\n     });\n \n     it('should allow to select a person', () => {\n-      page.people().eq(1)\n-        .find('td').eq(0)\n-        .find('a')\n-        .click();\n+      page.people().eq(1).find('td').eq(0).find('a').click();\n \n-      page.assertHash('#/people/emma-de-milliano-1876')\n+      page.assertHash('#/people/emma-de-milliano-1876');\n \n-      page.people().eq(1)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n     });\n   });\n });\n"
                },
                {
                    "date": 1715858220377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,26 +6,29 @@\n const page = {\n   spyOnPeopleRequest: () => {\n     const spy = cy.spy().as('peopleRequest');\n \n-    cy.intercept('**/people.json', (req) => {\n+    cy.intercept('**/people.json', req => {\n       spy();\n       req.reply({ body: [] });\n-    })\n+    });\n   },\n-  mockPeople: () => cy.intercept('**/people.json', { fixture: 'people' }).as('peopleData'),\n-  mockLessPeople: () => cy.intercept('**/people.json', { fixture: 'lessPeople' }).as('peopleData'),\n-  mockNoPeople: () => cy.intercept('**/people.json', { body: [] }).as('peopleData'),\n+  mockPeople: () =>\n+    cy.intercept('**/people.json', { fixture: 'people' }).as('peopleData'),\n+  mockLessPeople: () =>\n+    cy.intercept('**/people.json', { fixture: 'lessPeople' }).as('peopleData'),\n+  mockNoPeople: () =>\n+    cy.intercept('**/people.json', { body: [] }).as('peopleData'),\n   mockPeopleError: () => {\n     const errorResponse = {\n       statusCode: 404,\n       body: '404 Not Found!',\n     };\n \n-    return cy.intercept('**/people.json', errorResponse).as('peopleData')\n+    return cy.intercept('**/people.json', errorResponse).as('peopleData');\n   },\n \n-  visit: (url) => {\n+  visit: url => {\n     cy.visit(url);\n     page.getByDataCy('app').should('exist');\n   },\n   getByDataCy: name => cy.get(`[data-cy=\"${name}\"]`),\n@@ -39,16 +42,15 @@\n   heading: () => page.peopleTable().find('th'),\n \n   assertHash: hash => cy.location('hash').should('eq', hash),\n   assertSearch: search => cy.location('search').should('eq', search),\n-  assetTitle: text => page.title()\n-    .should('have.length', 1)\n-    .and('have.text', text),\n-}\n+  assetTitle: text =>\n+    page.title().should('have.length', 1).and('have.text', text),\n+};\n \n let failed = false;\n \n-Cypress.on('fail', (e) => {\n+Cypress.on('fail', e => {\n   failed = true;\n   throw e;\n });\n \n@@ -72,18 +74,20 @@\n \n     it('should mark Home nav link as active', () => {\n       page.mockPeople();\n       page.visit('/');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'Home')\n         .should('have.attr', 'href', '#/')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should not mark People nav link as active', () => {\n       page.mockPeople();\n       page.visit('/');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .should('have.attr', 'href', '#/people')\n         .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n@@ -93,9 +97,8 @@\n       page.visit('/');\n       page.assetTitle('Home Page');\n     });\n \n-\n     it('should not send API request', () => {\n       page.spyOnPeopleRequest();\n       page.visit('/');\n       cy.get('@peopleRequest').should('not.be.called');\n@@ -151,10 +154,16 @@\n     it('should not have active nav links', () => {\n       page.mockPeople();\n       page.visit('/#/some/not/existing/page');\n \n-      page.nav().contains('a', 'Home').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n-      page.nav().contains('a', 'People').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n+      page\n+        .nav()\n+        .contains('a', 'Home')\n+        .should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n+      page\n+        .nav()\n+        .contains('a', 'People')\n+        .should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should have only correct title', () => {\n       page.mockPeople();\n@@ -209,17 +218,19 @@\n \n     it('should have People nav link active', () => {\n       page.mockPeople();\n       page.visit('/#/people');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n     it('should have Home nav link not active', () => {\n       page.mockPeople();\n       page.visit('/#/people');\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'Home')\n         .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -343,10 +354,9 @@\n \n     it('should show the people loaded from API', () => {\n       page.mockLessPeople();\n       page.visit('/#/people');\n-      page.people()\n-        .should('have.length', 6);\n+      page.people().should('have.length', 6);\n     });\n \n     describe('People table', () => {\n       beforeEach(() => {\n@@ -365,44 +375,70 @@\n         page.heading().eq(5).should('have.text', 'Father');\n       });\n \n       it('should show all the people', () => {\n-        page.people()\n-          .should('have.length', 39);\n+        page.people().should('have.length', 39);\n       });\n \n       it('should render all required person data', () => {\n-        page.people().eq(1).find('td').eq(0).should('have.text', 'Emma de Milliano');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n+          .should('have.text', 'Emma de Milliano');\n         page.people().eq(1).find('td').eq(1).should('have.text', 'f');\n         page.people().eq(1).find('td').eq(2).should('have.text', '1876');\n         page.people().eq(1).find('td').eq(3).should('have.text', '1956');\n-        page.people().eq(1).find('td').eq(4).should('have.text', 'Sophia van Damme');\n-        page.people().eq(1).find('td').eq(5).should('have.text', 'Petrus de Milliano');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(4)\n+          .should('have.text', 'Sophia van Damme');\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(5)\n+          .should('have.text', 'Petrus de Milliano');\n       });\n \n       it('should have red names for women', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.class', 'has-text-danger');\n       });\n \n       it('should have blue names for men', () => {\n-        page.people().eq(3)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(3)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('not.have.class', 'has-text-danger');\n       });\n \n       it('should have correct links as person names', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(1)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.attr', 'href', '#/people/emma-de-milliano-1876')\n           .and('have.text', 'Emma de Milliano');\n \n-        page.people().eq(3)\n-          .find('td').eq(0)\n+        page\n+          .people()\n+          .eq(3)\n+          .find('td')\n+          .eq(0)\n           .find('a')\n           .should('have.attr', 'href', '#/people/jan-van-brussel-1714')\n           .and('have.text', 'Jan van Brussel');\n       });\n@@ -410,64 +446,57 @@\n       it('should not have a selected person', () => {\n         page.mockPeople();\n         page.visit('/#/people');\n \n-        cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-          .should('not.exist');\n+        cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should(\n+          'not.exist',\n+        );\n       });\n \n       it('should allow to select a person', () => {\n-        page.people().eq(1)\n-          .find('td').eq(0)\n-          .find('a')\n-          .click();\n+        page.people().eq(1).find('td').eq(0).find('a').click();\n \n-        page.assertHash('#/people/emma-de-milliano-1876')\n+        page.assertHash('#/people/emma-de-milliano-1876');\n \n-        page.people().eq(1)\n-          .should('have.class', SELECTED_PERSON_CLASS);\n+        page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n       });\n \n       it('should have a red link to a mother', () => {\n-        page.people().eq(0)\n-          .find('td').eq(4)\n+        page\n+          .people()\n+          .eq(0)\n+          .find('td')\n+          .eq(4)\n           .contains('a', 'Maria van Brussel')\n           .should('have.attr', 'href', '#/people/maria-van-brussel-1801')\n-          .and('have.class', 'has-text-danger')\n+          .and('have.class', 'has-text-danger');\n       });\n \n       it('should have a link to a father', () => {\n-        page.people().eq(4)\n-          .find('td').eq(5)\n+        page\n+          .people()\n+          .eq(4)\n+          .find('td')\n+          .eq(5)\n           .contains('a', 'Emile Haverbeke')\n           .should('have.attr', 'href', '#/people/emile-haverbeke-1877')\n-          .and('not.have.class', 'has-text-danger')\n+          .and('not.have.class', 'has-text-danger');\n       });\n \n       it('should have a text name if the mother is not in the table', () => {\n-        page.people().eq(1)\n-          .find('td').eq(4)\n-          .find('a')\n-          .should('not.exist')\n+        page.people().eq(1).find('td').eq(4).find('a').should('not.exist');\n       });\n \n       it('should have a text name if the father is not in the table', () => {\n-        page.people().eq(1)\n-          .find('td').eq(5)\n-          .find('a')\n-          .should('not.exist')\n+        page.people().eq(1).find('td').eq(5).find('a').should('not.exist');\n       });\n \n       it('should have an empty cell if the motherName is not given', () => {\n-        page.people().eq(20)\n-          .find('td').eq(4)\n-          .should('have.text', '-')\n+        page.people().eq(20).find('td').eq(4).should('have.text', '-');\n       });\n \n       it('should have an empty cell if the fatherName is not given', () => {\n-        page.people().eq(20)\n-          .find('td').eq(5)\n-          .should('have.text', '-')\n+        page.people().eq(20).find('td').eq(5).should('have.text', '-');\n       });\n     });\n   });\n \n@@ -481,9 +510,10 @@\n       page.assertHash('#/people/emma-de-milliano-1876');\n     });\n \n     it('should have People nav link active', () => {\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -495,37 +525,32 @@\n       page.peopleTable().should('exist');\n     });\n \n     it('should have one selected person', () => {\n-      page.people().eq(1)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n \n-      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-        .should('have.length', 1);\n+      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should(\n+        'have.length',\n+        1,\n+      );\n     });\n \n     it('should highlight person with given slug', () => {\n       page.visit('/#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .should('have.class', SELECTED_PERSON_CLASS)\n+      page.people().eq(3).should('have.class', SELECTED_PERSON_CLASS);\n     });\n \n     it('should allow to select another person', () => {\n       page.visit('/#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .find('td').eq(0)\n-        .find('a')\n-        .click();\n+      page.people().eq(3).find('td').eq(0).find('a').click();\n \n-      page.assertHash('#/people/jan-van-brussel-1714')\n+      page.assertHash('#/people/jan-van-brussel-1714');\n \n-      page.people().eq(3)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(3).should('have.class', SELECTED_PERSON_CLASS);\n \n-      page.people().eq(1)\n-        .should('not.have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('not.have.class', SELECTED_PERSON_CLASS);\n     });\n   });\n \n   describe('#/people/:wrong-slug page', () => {\n@@ -538,9 +563,10 @@\n       page.assertHash('#/people/non-existing-slug');\n     });\n \n     it('should have People nav link active', () => {\n-      page.nav()\n+      page\n+        .nav()\n         .contains('a', 'People')\n         .and('have.class', ACTIVE_NAV_LINK_CLASS);\n     });\n \n@@ -552,21 +578,16 @@\n       page.peopleTable().should('exist');\n     });\n \n     it('should not have a selected person', () => {\n-      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n-        .should('not.exist');\n+      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS).should('not.exist');\n     });\n \n     it('should allow to select a person', () => {\n-      page.people().eq(1)\n-        .find('td').eq(0)\n-        .find('a')\n-        .click();\n+      page.people().eq(1).find('td').eq(0).find('a').click();\n \n-      page.assertHash('#/people/emma-de-milliano-1876')\n+      page.assertHash('#/people/emma-de-milliano-1876');\n \n-      page.people().eq(1)\n-        .should('have.class', SELECTED_PERSON_CLASS);\n+      page.people().eq(1).should('have.class', SELECTED_PERSON_CLASS);\n     });\n   });\n });\n"
                }
            ],
            "date": 1715857970491,
            "name": "Commit-0",
            "content": "/// <reference types=\"Cypress\" />\n\nconst ACTIVE_NAV_LINK_CLASS = 'has-background-grey-lighter';\nconst SELECTED_PERSON_CLASS = 'has-background-warning';\n\nconst page = {\n  spyOnPeopleRequest: () => {\n    const spy = cy.spy().as('peopleRequest');\n\n    cy.intercept('**/people.json', (req) => {\n      spy();\n      req.reply({ body: [] });\n    })\n  },\n  mockPeople: () => cy.intercept('**/people.json', { fixture: 'people' }).as('peopleData'),\n  mockLessPeople: () => cy.intercept('**/people.json', { fixture: 'lessPeople' }).as('peopleData'),\n  mockNoPeople: () => cy.intercept('**/people.json', { body: [] }).as('peopleData'),\n  mockPeopleError: () => {\n    const errorResponse = {\n      statusCode: 404,\n      body: '404 Not Found!',\n    };\n\n    return cy.intercept('**/people.json', errorResponse).as('peopleData')\n  },\n\n  visit: (url) => {\n    cy.visit(url);\n    page.getByDataCy('app').should('exist');\n  },\n  getByDataCy: name => cy.get(`[data-cy=\"${name}\"]`),\n  title: () => cy.get('.title'),\n  nav: () => cy.getByDataCy('nav'),\n  loader: () => cy.getByDataCy('loader'),\n  noPeopleMessage: () => cy.getByDataCy('noPeopleMessage'),\n  peopleLoadingError: () => cy.getByDataCy('peopleLoadingError'),\n  peopleTable: () => cy.getByDataCy('peopleTable'),\n  people: () => cy.getByDataCy('person'),\n  heading: () => page.peopleTable().find('th'),\n\n  assertHash: hash => cy.location('hash').should('eq', hash),\n  assertSearch: search => cy.location('search').should('eq', search),\n  assetTitle: text => page.title()\n    .should('have.length', 1)\n    .and('have.text', text),\n}\n\nlet failed = false;\n\nCypress.on('fail', (e) => {\n  failed = true;\n  throw e;\n});\n\ndescribe('', () => {\n  beforeEach(() => {\n    if (failed) Cypress.runner.stop();\n  });\n\n  describe('/ page', () => {\n    it('should have correct address', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.assertHash('');\n    });\n\n    it('should have navigation', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.nav().should('exist');\n    });\n\n    it('should mark Home nav link as active', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.nav()\n        .contains('a', 'Home')\n        .should('have.attr', 'href', '/')\n        .and('have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should not mark People nav link as active', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.nav()\n        .contains('a', 'People')\n        .should('have.attr', 'href', '#/people')\n        .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have only correct title', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.assetTitle('Home Page');\n    });\n\n\n    it('should not send API request', () => {\n      page.spyOnPeopleRequest();\n      page.visit('/');\n      cy.get('@peopleRequest').should('not.be.called');\n    });\n\n    it('should not have loader', () => {\n      cy.clock();\n      page.mockPeople();\n      page.visit('/');\n      page.loader().should('not.exist');\n    });\n\n    it('should not have the `no people` message', () => {\n      page.mockNoPeople();\n      page.visit('/');\n      page.noPeopleMessage().should('not.exist');\n    });\n\n    it('should not have loading error', () => {\n      page.mockPeopleError();\n      page.visit('/');\n      page.peopleLoadingError().should('not.exist');\n    });\n\n    it('should not have people table', () => {\n      page.mockPeople();\n      page.visit('/');\n      page.peopleTable().should('not.exist');\n    });\n  });\n\n  describe('App', () => {\n    it('should redirect from /home to /', () => {\n      page.visit('/#/home');\n      page.assertHash('#/');\n      page.assetTitle('Home Page');\n    });\n  });\n\n  describe('Non existing page', () => {\n    it('should have correct address', () => {\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n      page.assertHash('#/some/not/existing/page');\n    });\n\n    it('should have navigation', () => {\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n      page.nav().should('exist');\n    });\n\n    it('should not have active nav links', () => {\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n\n      page.nav().contains('a', 'Home').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n      page.nav().contains('a', 'People').should('not.have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have only correct title', () => {\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n      page.assetTitle('Page not found');\n    });\n\n    it('should not send API request', () => {\n      page.spyOnPeopleRequest();\n      page.visit('/#/some/not/existing/page');\n      cy.get('@peopleRequest').should('not.be.called');\n    });\n\n    it('should not have loader', () => {\n      cy.clock();\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n      page.loader().should('not.exist');\n    });\n\n    it('should not have the `no people` message', () => {\n      page.mockNoPeople();\n      page.visit('/#/some/not/existing/page');\n      page.noPeopleMessage().should('not.exist');\n    });\n\n    it('should not have loading error', () => {\n      page.mockPeopleError();\n      page.visit('/#/some/not/existing/page');\n      page.peopleLoadingError().should('not.exist');\n    });\n\n    it('should not have people table', () => {\n      page.mockPeople();\n      page.visit('/#/some/not/existing/page');\n      page.peopleTable().should('not.exist');\n    });\n  });\n\n  describe('#/people page', () => {\n    it('should have correct address', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.assertHash('#/people');\n    });\n\n    it('should have navigation', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.nav().should('exist');\n    });\n\n    it('should have People nav link active', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.nav()\n        .contains('a', 'People')\n        .and('have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have Home nav link not active', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.nav()\n        .contains('a', 'Home')\n        .and('not.have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have only correct title', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.assetTitle('People Page');\n    });\n\n    it('should send one API request', () => {\n      page.spyOnPeopleRequest();\n      page.visit('/#/people');\n      cy.get('@peopleRequest').should('have.been.calledOnce');\n    });\n\n    it('should show loader before the people are loaded', () => {\n      cy.clock();\n      page.mockPeople();\n      page.visit('/#/people');\n      page.loader().should('exist');\n    });\n\n    it('should hide loader after people are loaded', () => {\n      cy.clock();\n      page.mockPeople();\n      page.visit('/#/people');\n      cy.tick(10000);\n      page.loader().should('not.exist');\n    });\n\n    it('should hide loader if no people were loaded', () => {\n      cy.clock();\n      page.mockNoPeople();\n      page.visit('/#/people');\n      cy.tick(10000);\n      page.loader().should('not.exist');\n    });\n\n    it('should hide loader on people loading error', () => {\n      cy.clock();\n      page.mockNoPeople();\n      page.visit('/#/people');\n      cy.tick(10000);\n      page.loader().should('not.exist');\n    });\n\n    it('should show the `no people` message if API sent no people', () => {\n      page.mockNoPeople();\n      page.visit('/#/people');\n      page.noPeopleMessage().should('exist');\n    });\n\n    it('should not show the `no people` message if people are not empty', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.noPeopleMessage().should('not.exist');\n    });\n\n    it('should not show the `no people` message on people loading error', () => {\n      page.mockPeopleError();\n      page.visit('/#/people');\n      page.noPeopleMessage().should('not.exist');\n    });\n\n    it('should not show the `no people` message before an empty response received', () => {\n      cy.clock();\n      page.mockNoPeople();\n      page.visit('/#/people');\n      page.noPeopleMessage().should('not.exist');\n    });\n\n    it('should show loading error on peolpe loading error', () => {\n      page.mockPeopleError();\n      page.visit('/#/people');\n      page.peopleLoadingError().should('exist');\n    });\n\n    it('should not show loading error if people were loaded', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.peopleLoadingError().should('not.exist');\n    });\n\n    it('should not show loading error if API send no people', () => {\n      page.mockPeopleError();\n      page.visit('/#/people');\n      page.peopleLoadingError().should('not.exist');\n    });\n\n    it('should not show loading error before an error response received', () => {\n      cy.clock();\n      page.mockPeopleError();\n      page.visit('/#/people');\n      page.peopleLoadingError().should('not.exist');\n    });\n\n    it('should show people table if people are loaded', () => {\n      page.mockPeople();\n      page.visit('/#/people');\n      page.peopleTable().should('exist');\n    });\n\n    it('should not show people table if API sent no people', () => {\n      page.mockNoPeople();\n      page.visit('/#/people');\n      page.peopleTable().should('not.exist');\n    });\n\n    it('should not show people table on people loading error', () => {\n      page.mockPeopleError();\n      page.visit('/#/people');\n      page.peopleTable().should('not.exist');\n    });\n\n    it('should not show people table before a response received', () => {\n      cy.clock();\n      page.mockPeople();\n      page.visit('/#/people');\n      page.peopleTable().should('not.exist');\n    });\n\n    it('should show the people loaded from API', () => {\n      page.mockLessPeople();\n      page.visit('/#/people');\n      page.people()\n        .should('have.length', 6);\n    });\n\n    describe('People table', () => {\n      beforeEach(() => {\n        page.mockPeople();\n        page.visit('/#/people');\n      });\n\n      it('should have all the required columns', () => {\n        page.heading().should('have.length', 6);\n\n        page.heading().eq(0).should('have.text', 'Name');\n        page.heading().eq(1).should('have.text', 'Sex');\n        page.heading().eq(2).should('have.text', 'Born');\n        page.heading().eq(3).should('have.text', 'Died');\n        page.heading().eq(4).should('have.text', 'Mother');\n        page.heading().eq(5).should('have.text', 'Father');\n      });\n\n      it('should show all the people', () => {\n        page.people()\n          .should('have.length', 39);\n      });\n\n      it('should render all required person data', () => {\n        page.people().eq(1).find('td').eq(0).should('have.text', 'Emma de Milliano');\n        page.people().eq(1).find('td').eq(1).should('have.text', 'f');\n        page.people().eq(1).find('td').eq(2).should('have.text', '1876');\n        page.people().eq(1).find('td').eq(3).should('have.text', '1956');\n        page.people().eq(1).find('td').eq(4).should('have.text', 'Sophia van Damme');\n        page.people().eq(1).find('td').eq(5).should('have.text', 'Petrus de Milliano');\n      });\n\n      it('should have red names for women', () => {\n        page.people().eq(1)\n          .find('td').eq(0)\n          .find('a')\n          .should('have.class', 'has-text-danger');\n      });\n\n      it('should have blue names for men', () => {\n        page.people().eq(3)\n          .find('td').eq(0)\n          .find('a')\n          .should('not.have.class', 'has-text-danger');\n      });\n\n      it('should have correct links as person names', () => {\n        page.people().eq(1)\n          .find('td').eq(0)\n          .find('a')\n          .should('have.attr', 'href', '#/people/emma-de-milliano-1876')\n          .and('have.text', 'Emma de Milliano');\n\n        page.people().eq(3)\n          .find('td').eq(0)\n          .find('a')\n          .should('have.attr', 'href', '#/people/jan-van-brussel-1714')\n          .and('have.text', 'Jan van Brussel');\n      });\n\n      it('should not have a selected person', () => {\n        page.mockPeople();\n        page.visit('/#/people');\n\n        cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n          .should('not.exist');\n      });\n\n      it('should allow to select a person', () => {\n        page.people().eq(1)\n          .find('td').eq(0)\n          .find('a')\n          .click();\n\n        page.assertHash('#/people/emma-de-milliano-1876')\n\n        page.people().eq(1)\n          .should('have.class', SELECTED_PERSON_CLASS);\n      });\n\n      it('should have a red link to a mother', () => {\n        page.people().eq(0)\n          .find('td').eq(4)\n          .contains('a', 'Maria van Brussel')\n          .should('have.attr', 'href', '#/people/maria-van-brussel-1801')\n          .and('have.class', 'has-text-danger')\n      });\n\n      it('should have a link to a father', () => {\n        page.people().eq(4)\n          .find('td').eq(5)\n          .contains('a', 'Emile Haverbeke')\n          .should('have.attr', 'href', '#/people/emile-haverbeke-1877')\n          .and('not.have.class', 'has-text-danger')\n      });\n\n      it('should have a text name if the mother is not in the table', () => {\n        page.people().eq(1)\n          .find('td').eq(4)\n          .find('a')\n          .should('not.exist')\n      });\n\n      it('should have a text name if the father is not in the table', () => {\n        page.people().eq(1)\n          .find('td').eq(5)\n          .find('a')\n          .should('not.exist')\n      });\n\n      it('should have an empty cell if the motherName is not given', () => {\n        page.people().eq(20)\n          .find('td').eq(4)\n          .should('have.text', '-')\n      });\n\n      it('should have an empty cell if the fatherName is not given', () => {\n        page.people().eq(20)\n          .find('td').eq(5)\n          .should('have.text', '-')\n      });\n    });\n  });\n\n  describe('#/people/:correct-slug page', () => {\n    beforeEach(() => {\n      page.mockPeople();\n      page.visit('/#/people/emma-de-milliano-1876');\n    });\n\n    it('should have correct address', () => {\n      page.assertHash('#/people/emma-de-milliano-1876');\n    });\n\n    it('should have People nav link active', () => {\n      page.nav()\n        .contains('a', 'People')\n        .and('have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have only correct title', () => {\n      page.assetTitle('People Page');\n    });\n\n    it('should have people table', () => {\n      page.peopleTable().should('exist');\n    });\n\n    it('should have one selected person', () => {\n      page.people().eq(1)\n        .should('have.class', SELECTED_PERSON_CLASS);\n\n      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n        .should('have.length', 1);\n    });\n\n    it('should highlight person with given slug', () => {\n      page.visit('/#/people/jan-van-brussel-1714');\n\n      page.people().eq(3)\n        .should('have.class', SELECTED_PERSON_CLASS)\n    });\n\n    it('should allow to select another person', () => {\n      page.visit('/#/people/jan-van-brussel-1714');\n\n      page.people().eq(3)\n        .find('td').eq(0)\n        .find('a')\n        .click();\n\n      page.assertHash('#/people/jan-van-brussel-1714')\n\n      page.people().eq(3)\n        .should('have.class', SELECTED_PERSON_CLASS);\n\n      page.people().eq(1)\n        .should('not.have.class', SELECTED_PERSON_CLASS);\n    });\n  });\n\n  describe('#/people/:wrong-slug page', () => {\n    beforeEach(() => {\n      page.mockPeople();\n      page.visit('/#/people/non-existing-slug');\n    });\n\n    it('should have correct address', () => {\n      page.assertHash('#/people/non-existing-slug');\n    });\n\n    it('should have People nav link active', () => {\n      page.nav()\n        .contains('a', 'People')\n        .and('have.class', ACTIVE_NAV_LINK_CLASS);\n    });\n\n    it('should have only correct title', () => {\n      page.assetTitle('People Page');\n    });\n\n    it('should have people table', () => {\n      page.peopleTable().should('exist');\n    });\n\n    it('should not have a selected person', () => {\n      cy.get('[data-cy=\"person\"].' + SELECTED_PERSON_CLASS)\n        .should('not.exist');\n    });\n\n    it('should allow to select a person', () => {\n      page.people().eq(1)\n        .find('td').eq(0)\n        .find('a')\n        .click();\n\n      page.assertHash('#/people/emma-de-milliano-1876')\n\n      page.people().eq(1)\n        .should('have.class', SELECTED_PERSON_CLASS);\n    });\n  });\n});\n"
        }
    ]
}